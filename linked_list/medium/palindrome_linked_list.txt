Question:
Given the head of a singly linked list, return true if it is a 
palindrome or false otherwise.
Example 1:
Input: head = [1,2,2,1]
Output: true

Example 2:
Input: head = [1,2]
Output: false

Constraints:
The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9
Follow up: Could you do it in O(n) time and O(1) space?

Solution:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    private ListNode left;

    public boolean isPalindrome(ListNode head) {
        left = head;

        return recursiveCheck(head);
    }

    private boolean recursiveCheck(ListNode right){
        if(right != null){
            if(!recursiveCheck(right.next)){
                return false;
            }
            if(right.val != left.val){
                return false;
            }
            left = left.next;
        }
        return true;
    }
}