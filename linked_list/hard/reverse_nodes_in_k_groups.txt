Question:
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list.
If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:
The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000
Follow-up: Can you solve the problem in O(1) extra memory space?

Solution:
/**
 * Definition for singly-linked list.
 * public class ListListNode {
 *     int val;
 *     ListListNode next;
 *     ListListNode() {}
 *     ListListNode(int val) { this.val = val; }
 *     ListListNode(int val, ListListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    static ListNode reverseLinkedList(ListNode head) {
        ListNode temp = head;  
   
        ListNode prev = null;  
       
        while(temp != null){  
            ListNode front = temp.next;  
            temp.next = prev;  
            prev = temp;  
            temp = front; 
        }
        return prev;  
    }

    static ListNode getKthListNode(ListNode temp, int k) {
        k -= 1;
        
        while (temp != null && k > 0) {
            k--;
            
            temp = temp.next;
        }
        
        return temp;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp = head;
        
        ListNode prevLast = null;
        
        while (temp != null) {
            
            ListNode kThListNode = getKthListNode(temp, k);
            
            if (kThListNode == null) {
               
                if (prevLast != null) {
                    prevLast.next = temp;
                }
                
                break;
            }
            
            ListNode nextListNode = kThListNode.next;
            
            kThListNode.next = null;
            
            reverseLinkedList(temp);
            
            if (temp == head) {
                head = kThListNode;
            } else {
                prevLast.next = kThListNode;
            }
            
            prevLast = temp;
            temp = nextListNode;
        }
        return head;
    }
}