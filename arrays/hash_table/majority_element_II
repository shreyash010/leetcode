Question:
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. 

Example 1:
Input: nums = [3,2,3]
Output: [3]

Example 2:
Input: nums = [1]
Output: [1]

Example 3:
Input: nums = [1,2]
Output: [1,2]

Solution: (Used Extended version of Boyer Moore's Voting Algorithm)
class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> result = new ArrayList<>();
        int n = nums.length;

        int cnt1 = 0, cnt2 = 0, el1 = Integer.MIN_VALUE, el2 = Integer.MIN_VALUE;
        for(int i = 0; i < n; i++){
            int ele = nums[i];
            if(cnt1 == 0 && el2 != ele){
                cnt1=1;
                el1 = ele;
            }else if(cnt2 ==0 && el1 != ele){
                cnt2=1;
                el2 = ele;
            }else if(ele == el1){
                cnt1++;
            }else if(ele == el2){
                cnt2++;
            }else{
                cnt1--;
                cnt2--;
            }
        }

        cnt1 = 0; cnt2 = 0;
        for(int i = 0; i<n; i++){
            if(el1 == nums[i]) cnt1++;
            if(el2 == nums[i]) cnt2++;
        }


        int min = (int)n/3+1;
        if(cnt1>= min) result.add(el1);
        if(cnt2>= min) result.add(el2);

        return result;
    }
}

Remember:
There can never be more than 2 ele that satisfy the following condition of count > n/3;

Dry run and test if it is possible for Ex: (consider array between length 9-12) for this we have:
count(9/3 = 3 and 12/3 = 4) => meaning the count should be greater than 3 for arr length 9-12 (12 not included).
and 4 for arr length > 12-15(15 not included);

so you if try to find the ele with count greter than that you will get only 2 ele at max or the array will exceed
current countAppearance limit.