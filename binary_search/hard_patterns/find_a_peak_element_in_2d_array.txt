A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.
Given a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].
You may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.
You must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.

Example 1:
Input: mat = [[1,4],[3,2]]
Output: [0,1]
Explanation: Both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers.

Example 2:
Input: mat = [[10,20,15],[21,30,14],[7,16,32]]
Output: [1,1]
Explanation: Both 30 and 32 are peak elements so [1,1] and [2,2] are both acceptable answers.

Solution:
class Solution {
    private int findRowNo(int[][] mat, int row, int col, int mid){
        int maxEle = Integer.MIN_VALUE;
        int rowNo = -1;
        for(int i = 0; i<row; i++){
            if(mat[i][mid] > maxEle){
                maxEle = mat[i][mid];
                rowNo = i;
            }
        }
        return rowNo;
    }

    public int[] findPeakGrid(int[][] mat) {
        int row = mat.length;
        int col = mat[0].length;
        int start = 0, end = col-1;

        while(start <= end){
            int mid = (start + end)/2;
            int rowNo = findRowNo(mat, row, col, mid);
            int left = mid - 1 >= 0 ? mat[rowNo][mid-1] : -1;
            int right = mid + 1 < col ? mat[rowNo][mid+1] : -1;
            if(mat[rowNo][mid] > left && mat[rowNo][mid] > right){
                int[] ans = {rowNo, mid};
                return ans;
            }else if(mat[rowNo][mid] < left){
                end = mid-1;
            }else{
                start = mid+1;
            }
        }
        return new int[2];
    }
}